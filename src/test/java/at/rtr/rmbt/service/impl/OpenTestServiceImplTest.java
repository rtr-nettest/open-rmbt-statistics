package at.rtr.rmbt.service.impl;

import at.rtr.rmbt.TestConstants;
import at.rtr.rmbt.TestObjects;
import at.rtr.rmbt.TestUtils;
import at.rtr.rmbt.dto.ImageGenerateDto;
import at.rtr.rmbt.dto.SpeedGraphItemDTO;
import at.rtr.rmbt.exception.InvalidImageTypeException;
import at.rtr.rmbt.exception.InvalidLanguageException;
import at.rtr.rmbt.exception.InvalidUuidException;
import at.rtr.rmbt.mapper.OpenTestMapper;
import at.rtr.rmbt.repository.*;
import at.rtr.rmbt.response.LocationGraphDTO;
import at.rtr.rmbt.response.OpenTestDetailsDTO;
import at.rtr.rmbt.response.OpenTestDetailsDtoResponse;
import at.rtr.rmbt.response.OpenTestGraphDTO;
import at.rtr.rmbt.response.opentest.OpenTestDTO;
import at.rtr.rmbt.response.opentest.OpenTestSearchResponse;
import at.rtr.rmbt.service.ImageExportService;
import at.rtr.rmbt.service.LocationService;
import at.rtr.rmbt.service.PingService;
import at.rtr.rmbt.service.RadioSignalService;
import at.rtr.rmbt.utils.QueryParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.junit.Ignore;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
class OpenTestServiceImplTest {

    @Mock
    private OpenTestRepository openTestRepository;
    @Mock
    private ImageExportService imageExportService;
    @Mock
    private PingService pingService;
    @Mock
    private RadioSignalService radioSignalService;
    @Mock
    private LocationService locationService;
    @Mock
    private GeoAnalyticsRepository geoAnalyticsRepository;
    @Mock
    private OpenTestMapper openTestMapper;
    @Mock
    private OpenTestStatisticsRepository openTestStatisticsRepository;
    @Mock
    private HourlyStatisticRepository hourlyStatisticRepository;
    @Mock
    private HistogramRepository histogramRepository;
    @InjectMocks
    private OpenTestServiceImpl openTestService;

    private MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>();
    @Mock
    private ImageGenerateDto imageGenerateDto;
    @Mock
    private OpenTestDetailsDTO openTestDetailsDTO;
    @Mock
    private OpenTestDetailsDtoResponse openTestDetailsDtoResponse;
    @Mock
    private LocationGraphDTO locationGraphDTO;

    @Test
    void searchOpenDataTests_defaultJson_ResponseEntity() throws JsonProcessingException {
        when(openTestRepository.getOpenTestSearchResults(any(QueryParser.class), anyLong(), anyLong(), any()))
                .thenReturn(getOpenTestSearchResponse());
        var actualResult = openTestService.searchOpenDataTests(parameters);

        assertEquals(TestUtils.removeLineEndings(TestConstants.DEFAULT_EXPECTED_JSON_RESPONSE_ENTITY), TestUtils.removeLineEndings(actualResult.toString()));
    }

    @Test
    void searchOpenDataTests_сsv_ResponseEntity() throws JsonProcessingException {
        parameters.put("format", List.of("csv"));
        when(openTestRepository.getOpenTestSearchResults(any(QueryParser.class), anyLong(), anyLong(), any()))
                .thenReturn(getOpenTestSearchResponse());
        var actualResult = openTestService.searchOpenDataTests(parameters);

        assertEquals(TestUtils.removeLineEndings(TestConstants.DEFAULT_EXPECTED_CSV_RESPONSE_ENTITY), TestUtils.removeLineEndings(actualResult.toString()));
    }

    @Test
    void searchOpenDataTests_xlsx_ResponseEntity() throws IOException, InvalidFormatException {
        parameters.put("format", List.of("xlsx"));
        when(openTestRepository.getOpenTestSearchResults(any(QueryParser.class), anyLong(), anyLong(), any()))
                .thenReturn(getOpenTestSearchResponse());
        var actualResult = openTestService.searchOpenDataTests(parameters);

        assertNotNull(actualResult.getBody());
        InputStream is = new ByteArrayInputStream((byte[]) actualResult.getBody());
        Workbook actualXlsx = WorkbookFactory.create(is);

        TestUtils.verifyDataInExcelBookAllSheets(getExpectedXlsx(), actualXlsx);
    }

    @Test
    void retrievePng_wrongLanguage_InvalidLanguageException() {
        assertThrows(InvalidLanguageException.class,
                () -> openTestService.retrievePng(TestConstants.DEFAULT_TEXT, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING, TestConstants.DEFAULT_PNG_SIZE));
    }

    @Test
    void retrievePng_wrongImageType_InvalidImageTypeException() {
        assertThrows(InvalidImageTypeException.class,
                () -> openTestService.retrievePng(TestConstants.DEFAULT_LANGUAGE, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING, TestConstants.DEFAULT_TEXT));
    }

    @Test
    void retrievePng_wrongLanguage_InvalidUuidException() {
        when(openTestRepository.getImageGenerateDto(any(), any(), any())).thenThrow(new RuntimeException());

        assertThrows(InvalidUuidException.class,
                () -> openTestService.retrievePng(TestConstants.DEFAULT_LANGUAGE, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING, TestConstants.DEFAULT_PNG_SIZE));
    }

    @Test
    void retrievePng_correctInvocation_ResponseEntity() {
        when(openTestRepository.getImageGenerateDto(TestConstants.DEFAULT_LANGUAGE, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING, TestConstants.DEFAULT_PNG_SIZE))
                .thenReturn(imageGenerateDto);
        when(imageExportService.generateImage(imageGenerateDto)).thenReturn(TestConstants.DEFAULT_BYTE_ARRAY);

        var actualResult = openTestService.retrievePng(TestConstants.DEFAULT_LANGUAGE, TestConstants.DEFAULT_OPEN_TEST_UUID_STRING_WITH_PREFIX, TestConstants.DEFAULT_PNG_SIZE);

        assertEquals(expectedImageResponse(), actualResult);
    }

    @Test
    void getOpenTestByUuid_openTestDetailsDTONotExist_OpenTestDetailsDtoResponseInvalidUuid() {
        var actualResult = openTestService.getOpenTestByUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING_WITH_PREFIX, TestConstants.DEFAULT_VERBOSE);

        assertEquals(expectedOpenTestDetailsDtoResponseInvalidUuid(), actualResult);
    }

    @Disabled("Fails with fences")
    @Test
    void getOpenTestByUuid_signalStrengthIsNullAndLteRsrpIsNull_OpenTestDetailsDtoResponse() {
        var expectedResult = new OpenTestDetailsDtoResponse();
        expectedResult.setDownloadClassification(TestConstants.DEFAULT_DOWNLOAD_CLASSIFICATION);
        expectedResult.setUploadClassification(TestConstants.DEFAULT_UPLOAD_CLASSIFICATION);
        expectedResult.setPingClassification(TestConstants.DEFAULT_PING_CLASSIFICATION);
        expectedResult.setDownloadKbit(TestConstants.DEFAULT_DOWNLOAD_KBIT);
        expectedResult.setUploadKbit(TestConstants.DEFAULT_UPLOAD_KBIT);
        expectedResult.setPingMs(TestConstants.DEFAULT_PING_MS);
        expectedResult.setSpeedCurve(getEmptyOpenTestGraphDTO());
        expectedResult.setSpeedCurveThreadwise(getEmptySpeedCurveThreadwise());
        var updatedOpenTestDetailsDtoResponse = new OpenTestDetailsDtoResponse();
        mockRepositoryAndMapper(updatedOpenTestDetailsDtoResponse);
        when(openTestDetailsDTO.getSpeedItems()).thenReturn(TestConstants.DEFAULT_SPEED_ITEMS_EMPTY);

        updatedOpenTestDetailsDtoResponse.setDownloadKbit(TestConstants.DEFAULT_DOWNLOAD_KBIT);
        updatedOpenTestDetailsDtoResponse.setUploadKbit(TestConstants.DEFAULT_UPLOAD_KBIT);
        updatedOpenTestDetailsDtoResponse.setPingMs(TestConstants.DEFAULT_PING_MS);

        var actualResult = openTestService.getOpenTestByUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING_WITH_PREFIX, TestConstants.DEFAULT_VERBOSE);

        assertEquals(expectedResult, actualResult);
    }

    @Test
    void getOpenTestByUuid_speed_speedItemsIsNull_OpenTestDetailsDtoResponse() {
        var expectedResult = new OpenTestDetailsDtoResponse();
        expectedResult.setDownloadClassification(TestConstants.DEFAULT_DOWNLOAD_CLASSIFICATION);
        expectedResult.setUploadClassification(TestConstants.DEFAULT_UPLOAD_CLASSIFICATION);
        expectedResult.setPingClassification(TestConstants.DEFAULT_PING_CLASSIFICATION);
        expectedResult.setDownloadKbit(TestConstants.DEFAULT_DOWNLOAD_KBIT);
        expectedResult.setUploadKbit(TestConstants.DEFAULT_UPLOAD_KBIT);
        expectedResult.setPingMs(TestConstants.DEFAULT_PING_MS);
        expectedResult.setSpeedCurve(getEmptyOpenTestGraphDTO());
        expectedResult.setSpeedCurveThreadwise(null);
        var updatedOpenTestDetailsDtoResponse = new OpenTestDetailsDtoResponse();
        mockRepositoryAndMapper(updatedOpenTestDetailsDtoResponse);
        when(openTestDetailsDTO.getSpeedItems()).thenReturn(null);

        updatedOpenTestDetailsDtoResponse.setDownloadKbit(TestConstants.DEFAULT_DOWNLOAD_KBIT);
        updatedOpenTestDetailsDtoResponse.setUploadKbit(TestConstants.DEFAULT_UPLOAD_KBIT);
        updatedOpenTestDetailsDtoResponse.setPingMs(TestConstants.DEFAULT_PING_MS);

        var actualResult = openTestService.getOpenTestByUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING_WITH_PREFIX, TestConstants.DEFAULT_VERBOSE);

        assertEquals(expectedResult, actualResult);
    }

    @Test
    void getStatistics_correctInvocation_expectedStatisticsMap() {
        var expectedResult = TestObjects.statisticsResponse();
        var parameters = TestObjects.parametersMap();
        when(openTestStatisticsRepository.calculateStatistics(any(QueryParser.class))).thenReturn(expectedResult);

        var actualResult = openTestService.getStatistics(parameters);

        assertEquals(expectedResult, actualResult);
    }

    @Test
    void getIntraday_customQuantile_expectedHourlyStatisticResponses() {
        var expectedResult = List.of(TestObjects.hourlyStatisticResponse());
        var parameters = TestObjects.parametersMap();
        parameters.put("quantile", List.of(String.valueOf(TestConstants.DEFAULT_QUANTILE)));
        when(hourlyStatisticRepository.getHourlyStatistic(any(QueryParser.class), eq(TestConstants.DEFAULT_QUANTILE))).thenReturn(expectedResult);

        var actualResult = openTestService.getIntraday(parameters);

        assertEquals(expectedResult, actualResult);
    }

    @Test
    void getIntraday_defaultQuantile_expectedHourlyStatisticResponses() {
        var expectedResult = List.of(TestObjects.hourlyStatisticResponse());
        var parameters = TestObjects.parametersMap();
        when(hourlyStatisticRepository.getHourlyStatistic(any(QueryParser.class), eq(0.5D))).thenReturn(expectedResult);

        var actualResult = openTestService.getIntraday(parameters);

        assertEquals(expectedResult, actualResult);
    }

    @Test
    void getHistogram_correctInvocation_expectedHistogramResponse() {
        var expectedResult = TestObjects.histogramResponse();
        expectedResult.getDownloadKbit().get(0).upperBound = null;
        expectedResult.getUploadKbit().get(0).upperBound = null;
        expectedResult.getPingMs().get(0).upperBound = null;
        var parameters = TestObjects.parametersMap();
        when(histogramRepository.getJSONForHistogram(eq(0.0), eq(1.0), eq("speed_download_log"), eq(true), any(QueryParser.class)))
                .thenReturn(List.of(TestObjects.downloadKbitBucketResponse()));
        when(histogramRepository.getJSONForHistogram(eq(0.0), eq(1.0), eq("speed_upload_log"), eq(true), any(QueryParser.class)))
                .thenReturn(List.of(TestObjects.uploadKbitBucketResponse()));
        when(histogramRepository.getJSONForHistogram(eq(0.0), eq(300.0), eq("(t.ping_median::float / 1000000)"), eq(false), any(QueryParser.class)))
                .thenReturn(List.of(TestObjects.pingMsBucketResponse()));

        var actualResult = openTestService.getHistogram(parameters);

        assertEquals(expectedResult, actualResult);
    }

    private Map<String, Map<String, List<SpeedGraphItemDTO.SpeedItemThreadwise>>> getEmptySpeedCurveThreadwise() {
        return Map.of("upload", Collections.emptyMap(), "download", Collections.emptyMap());
    }

    private OpenTestGraphDTO getEmptyOpenTestGraphDTO() {
        return new OpenTestGraphDTO();
    }

    private void mockRepositoryAndMapper(OpenTestDetailsDtoResponse updatedOpenTestDetailsDtoResponse) {
        when(openTestRepository.getOpenTestByUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING))
                .thenReturn(openTestDetailsDTO);
        when(openTestMapper.toOpenTestDetailsDTOResponse(new OpenTestDetailsDtoResponse(), openTestDetailsDTO)).thenReturn(updatedOpenTestDetailsDtoResponse);
        when(openTestDetailsDTO.getClientTime()).thenReturn(TestConstants.DEFAULT_CLIENT_TIME_TIMESTAMP);
        when(openTestDetailsDTO.getTestUid()).thenReturn(TestConstants.DEFAULT_TEST_UID);
        when(locationService.getLocationGraph(TestConstants.DEFAULT_TEST_UID, openTestDetailsDTO.getClientTime().getTime())).thenReturn(locationGraphDTO);
    }


    private OpenTestDetailsDtoResponse expectedOpenTestDetailsDtoResponseInvalidUuid() {
        OpenTestDetailsDtoResponse openTestDetailsDtoResponse = new OpenTestDetailsDtoResponse();
        openTestDetailsDtoResponse.setError("invalid open-uuid");
        return openTestDetailsDtoResponse;
    }

    private ResponseEntity<Object> expectedImageResponse() {
        return ResponseEntity.ok()
                .contentType(new MediaType("image", "png"))
                .body(TestConstants.DEFAULT_BYTE_ARRAY);
    }

    private Workbook getExpectedXlsx() throws IOException, InvalidFormatException {
        byte[] result = Files.readAllBytes(Paths.get("src/test/resources/opendata/searchOpenDataTests.xlsx"));
        InputStream is = new ByteArrayInputStream(result);
        return WorkbookFactory.create(is);
    }

    private OpenTestSearchResponse getOpenTestSearchResponse() {
        OpenTestDTO openTestDto = getOpenTestDto();
        return OpenTestSearchResponse.builder()
                .durationMs(TestConstants.DEFAULT_TEST_DURATION.longValue())
                .nextCursor(TestConstants.DEFAULT_NEXT_CURSOR)
                .results(List.of(openTestDto))
                .build();
    }

    private OpenTestDTO getOpenTestDto() {
        return OpenTestDTO.builder()
                .openUuid(TestConstants.DEFAULT_OPEN_UUID)
                .openTestUuid(TestConstants.DEFAULT_OPEN_TEST_UUID_STRING)
                .time(TestConstants.DEFAULT_TIME_STRING)
                .fullTime(TestConstants.DEFAULT_FULL_TIME_STRING)
                .clientTime(TestConstants.DEFAULT_CLIENT_TIME_TIMESTAMP)
                .latitude(TestConstants.DEFAULT_LATITUDE)
                .longitude(TestConstants.DEFAULT_LONGITUDE)
                .locAccuracy(TestConstants.DEFAULT_LOC_ACCURACY)
                .downloadKbit(TestConstants.DEFAULT_DOWNLOAD_KBIT)
                .uploadKbit(TestConstants.DEFAULT_UPLOAD_KBIT)
                .pingMs(TestConstants.DEFAULT_PING_MS)
                .signalStrength(TestConstants.DEFAULT_SIGNAL_STRENGTH)
                .lteRsrp(TestConstants.DEFAULT_LTE_RSRP)
                .platform(TestConstants.DEFAULT_PLATFORM)
                .model(TestConstants.DEFAULT_MODEL)
                .providerName(TestConstants.DEFAULT_PROVIDER)
                .downloadClassification(TestConstants.DEFAULT_DOWNLOAD_CLASSIFICATION)
                .uploadClassification(TestConstants.DEFAULT_UPLOAD_CLASSIFICATION)
                .pingClassification(TestConstants.DEFAULT_PING_CLASSIFICATION)
                .signalClassification(TestConstants.DEFAULT_SIGNAL_CLASSIFICATION)
                .build();
    }
}