package at.rtr.rmbt.controller;

import at.rtr.rmbt.constant.URIConstants;
import at.rtr.rmbt.response.ChoicesResponse;
import at.rtr.rmbt.response.histogram.HistogramResponse;
import at.rtr.rmbt.response.HourlyStatisticResponse;
import at.rtr.rmbt.response.OpenTestDetailsDtoResponse;
import at.rtr.rmbt.service.OpenTestService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@Slf4j
@RequiredArgsConstructor
public class OpenTestController {

    private final OpenTestService openTestService;

    @Operation(summary = "Search for open data tests",
            operationId = "search",
            description = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.",
            parameters = {
                    @Parameter(name = "download_kbit",
                            description = "Download speed in kilobit per second",
                            example = ">6903",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "upload_kbit",
                            description = "Upload speed in kilobit per second.",
                            schema = @Schema(type = "string"),
                            example = "<4670",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "ping_ms",
                            description = "Median ping (round-trip time) in milliseconds, measured on the server side.",
                            schema = @Schema(type = "string"),
                            example = "<16",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz",
                            description = "Community ID (Gemeindekennzahl) as defined by BEV, see https://www.bev.gv.at/.",
                            schema = @Schema(type = "string"),
                            example = "90001",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz_sa",
                            description = "Community ID (Gemeindekennzahl) as defined by Statistik Austria, see https://www.statistik.at/.",
                            schema = @Schema(type = "string"),
                            example = "91401",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cat_technology",
                            description = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_version",
                            description = "Software version number of the client.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "model",
                            description = "Name of the device used.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_name",
                            description = "Display name of the mobile network.",
                            schema = @Schema(type = "string"),
                            example = "Telkomsel",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_type",
                            description = "Type of the network, e.g. MOBILE, LAN, WLAN.",
                            schema = @Schema(type = "string"),
                            example = "MOBILE",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "platform",
                            description = "Platform on which the test has been conducted",
                            schema = @Schema(type = "string"),
                            example = "Android",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "signal_strength",
                            description = "Signal strength (RSSI) in dBm.",
                            schema = @Schema(type = "string"),
                            example = "-89",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lte_rsrp",
                            description = "LTE/NR signal strength as RSRP in dBm.",
                            schema = @Schema(type = "string"),
                            example = "-101",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_uuid",
                            description = "Open-UUID: A UUID connecting related tests.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_test_uuid",
                            description = "The Open Data UUID of the test.",
                            schema = @Schema(type = "string"),
                            example = "d642b8e3-a09e-4f33-b8db-42044ff51815",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_uuid",
                            description = "The private UUID identity of a client",
                            schema = @Schema(type = "string"),
                            example = "452d8d3b-d5be-4dbe-838b-1262144665d0",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loop_uuid",
                            description = "The loop UUID of a loop test",
                            schema = @Schema(type = "string"),
                            example = "173b704c-df79-4a7b-bd1b-591a30af3a00",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "test_uuid",
                            description = "The private UUID of a test",
                            example = "7af9f47f-edae-4ac0-ab61-aa6ffb33e64e",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "long",
                            description = "Longitude of the client position in WGS84.",
                            schema = @Schema(implementation = Double.class),
                            example = "15.17960005",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lat",
                            description = "Latitude of the client position n WGS84.",
                            schema = @Schema(implementation = Double.class),
                            example = "48.62757108",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radius",
                            description = "Radius in meters defining based on lat/long parameters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "mobile_provider_name",
                            description = "mobile operator name",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "provider_name",
                            description = "Name of the internet service provider.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_mcc_mnc",
                            description = "Identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.",
                            schema = @Schema(type = "string"),
                            example = "510-10",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_country",
                            description = "Home country of the SIM card in ISO 3166.",
                            schema = @Schema(type = "string"),
                            example = "AT",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_country",
                            description = "Country of the network in ISO 3166.",
                            schema = @Schema(type = "string"),
                            example = "AT",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_geoip",
                            description = "Country according client IP address databases in ISO 3166.",
                            schema = @Schema(type = "string"),
                            example = "AT",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_location",
                            description = "Country of geo-location n ISO 3166.",
                            example = "AT",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "user_server_selection",
                            description = "True when server is selected by the client",
                            schema = @Schema(implementation = Boolean.class),
                            example = "false",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loc_accuracy",
                            description = "Estimation of accuracy of client location in meters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "link_name",
                            description = "Austrian road/railway line identifier",
                            schema = @Schema(type = "string"),
                            example = "L8163",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "public_ip_as_name",
                            description = "Name of the AS of the clients public IP.",
                            schema = @Schema(type = "string"),
                            example = "P4NET P4 Play network operator, PL",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "time",
                            description = "UTC date and time when the test was started.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radio_band",
                            description = "Radio band used when conducting the test.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_area_code",
                            description = "Cell are according, naming according to technology, e.g. the Tracking Area Code (TAC) in case of 4G " +
                                    "or the Location Area Code (LAC) in case of 2G or 3G",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_location_id",
                            description = "Cell location, naming according to technology, e.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "additional_info",
                            description = "additional properties to return",
                            example = "download_classification",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "format",
                            description = "Desired output format, either 'csv' or 'json', default: json",
                            example = "json",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_by",
                            description = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                            example = "download_kbit",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_order",
                            description = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.",
                            schema = @Schema(type = "string"),
                            example = "asc",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "max_results",
                            description = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.",
                            schema = @Schema(implementation = Integer.class),
                            example = "10",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cursor",
                            description = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sender",
                            description = "Sender ID",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "timestamp",
                            description = "Alias '_'. Will be ignored and can be used to prevent client side caching of the response.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "asn",
                            description = "Provider ASN",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "land_cover",
                            description = "Land cover identifier according to CORINE, see https://land.copernicus.eu/en/products/corine-land-cover",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "implausible",
                            description = "True when test is implausible.",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "pinned",
                            description = "Pinned",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY)
            })
    @GetMapping(value = {URIConstants.OPEN_TEST_SEARCH, URIConstants.OPEN_TEST})
    public ResponseEntity<Object> searchForOpenDataTests(
            @Parameter(hidden = true) @RequestParam MultiValueMap<String, String> parameters) {
        return openTestService.searchOpenDataTests(parameters);
    }

    @Operation(summary = "Search for open data tests",
            operationId = "search",
            description = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.",
            parameters = {
                    @Parameter(name = "download_kbit",
                            description = "Download speed in kilobit per second",
                            schema = @Schema(type = "string"),
                            example = ">6903",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "upload_kbit",
                            description = "Upload speed in kilobit per second.",
                            schema = @Schema(type = "string"),
                            example = "<4670",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "ping_ms",
                            description = "Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions " +
                                    "(before June 3rd 2015) this was the minimum ping measured on the client side.",
                            schema = @Schema(type = "string"),
                            example = "<16",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz",
                            description = "Community ID (Gemeindekennzahl, see <http://www.bev.gv.at/portal/page?_pageid=713,2601287&_dad=portal&_schema=PORTAL>).",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz_sa",
                            description = "Community ID (Gemeindekennzahl, see <http://www.statistik.at/web_de/klassifikationen/regionale_gliederungen/gemeinden/index.html>)",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cat_technology",
                            description = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_version",
                            description = "Software version number of the client.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "model",
                            description = "Name of the device used.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_name",
                            description = "Display name of the mobile network.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_type",
                            description = "Type of the network, e.g. MOBILE, LAN, WLAN.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "platform",
                            description = "Platform on which the test has been conducted",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "signal_strength",
                            description = "Signal strength (RSSI) in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lte_rsrp",
                            description = "LTE signal strength in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_uuid",
                            description = "Open-UUID: Identifies the client that conducted the test. The a new Open-UUID is assigned to the client on a regular basis.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_test_uuid",
                            description = "The UUID of the test.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_uuid",
                            description = "The private UUID of a client",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loop_uuid",
                            description = "The loop UUID of a single loop test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "test_uuid",
                            description = "The private UUID of a test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "long",
                            description = "Longitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lat",
                            description = "Latitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radius",
                            description = "Radius in meters defining based on lat/long parameters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "mobile_provider_name",
                            description = "mobile operator name",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "provider_name",
                            description = "Name of the internet service provider.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_mcc_mnc",
                            description = "Network identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_country",
                            description = "Home country of the SIM card in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_country",
                            description = "Country of the network in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_geoip",
                            description = "Country according client IP address.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_location",
                            description = "Country of geo-location.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "user_server_selection",
                            description = "Legacy",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loc_accuracy",
                            description = "Estimation of accuracy of client location in meters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "link_name",
                            description = "Austrian road/raiway line identifier, e.g. 'A2'",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "public_ip_as_name",
                            description = "Name of the AS of the clients public IP.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "time",
                            description = "UTC date and time when test was started.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radio_band",
                            description = "Radio band used when conducting the test.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_area_code",
                            description = "Number describing the coarse location of a cell. E.g. the Tracking Area Code (TAC) in case of 4G " +
                                    "or the Location Area Code (LAC) in case of 2G or 3G",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_location_id",
                            description = "Number identifying the location of a cell. E.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "additional_info",
                            description = "additional properties to return",
                            example = "download_classification",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "format",
                            description = "Desired output format, either 'csv' or 'json', default: json",
                            example = "json",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_by",
                            description = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                            example = "download_kbit",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_order",
                            description = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.",
                            example = "asc",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "max_results",
                            description = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.",
                            schema = @Schema(implementation = Integer.class),
                            example = "10",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cursor",
                            description = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sender",
                            description = "Sender ID",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "timestamp",
                            description = "Alias '_'. Will be ignored and can be used to prevent caching of the response.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "asn",
                            description = "Provider asn",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "land_cover",
                            description = "Land cover number",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "implausible",
                            description = "Implausible",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "pinned",
                            description = "Pinned",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY)
            })
    @PostMapping(path = {URIConstants.OPEN_TEST_SEARCH, URIConstants.OPEN_TEST}, consumes = {MediaType.APPLICATION_FORM_URLENCODED_VALUE})
    public ResponseEntity<Object> searchForOpenDataTestsPost(@Parameter(hidden = true) @RequestParam MultiValueMap parameters) {
        return openTestService.searchOpenDataTests(parameters);
    }

    @Operation(summary = "Export png",
            description = "Export test result as png banner",
            operationId = "export-png",
            parameters = {
                    @Parameter(name = "lang",
                            description = "Mandatory. The language that should be exported.",
                            schema = @Schema(type = "string"),
                            example = "en",
                            in = ParameterIn.PATH,
                            required = true),
                    @Parameter(name = "open_test_uuid",
                            description = "Mandatory. The open-test-uuid of the test.",
                            schema = @Schema(type = "string"),
                            example = "Oc1326b7c-4141-42cb-b8c5-922c356a6cee",
                            in = ParameterIn.PATH,
                            required = true),
                    @Parameter(name = "size",
                            description = "Mandatory. Either 'forumlarge' or 'forumsmall' or 'thumbnail ",
                            schema = @Schema(type = "string"),
                            example = "thumbnail",
                            in = ParameterIn.PATH,
                            required = true)
            })
    @GetMapping(URIConstants.EXPORT_PNG)
    public ResponseEntity<Object> getPng(@PathVariable String lang,
                                         @PathVariable(name = "open_test_uuid") String openTestUuid,
                                         @PathVariable String size) {
        return openTestService.retrievePng(lang, openTestUuid, size);
    }

    @Operation(summary = "query for OpenTests",
            description = "Query for a specific measurement result",
            operationId = "opentest-query",
            parameters = {
                    @Parameter(name = "open_test_uuid",
                            description = "Mandatory. The open-test-uuid of the test.",
                            schema = @Schema(type = "string"),
                            example = "Oc1326b7c-4141-42cb-b8c5-922c356a6cee",
                            in = ParameterIn.PATH,
                            required = true),
                    @Parameter(name = "verbose",
                            description = "Optional. If >0 the threadwise speed curve is additionally returned.",
                            schema = @Schema(implementation = Integer.class),
                            example = "0",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sender",
                            description = "Optional. ID of the sender, for authentification.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY)
            })
    @GetMapping(value = URIConstants.OPEN_TEST_BY_UUID)
    public OpenTestDetailsDtoResponse getOpenTestByUuid(
            @PathVariable(value = "open_test_uuid") String openTestUuid,
            @RequestParam(value = "verbose", required = false) String verbose
    ) {
        return openTestService.getOpenTestByUuid(openTestUuid, verbose);
    }

    @Operation(summary = "Choices",
            operationId = "choices",
            description = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.",
            parameters = {
                    @Parameter(name = "download_kbit",
                            description = "Download speed in kilobit per second",
                            example = ">6903",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "upload_kbit",
                            description = "Upload speed in kilobit per second.",
                            schema = @Schema(type = "string"),
                            example = "<4670",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "ping_ms",
                            description = "Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions " +
                                    "(before June 3rd 2015) this was the minimum ping measured on the client side.",
                            schema = @Schema(type = "string"),
                            example = "<16",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz",
                            description = "Community ID (Gemeindekennzahl, see <http://www.bev.gv.at/portal/page?_pageid=713,2601287&_dad=portal&_schema=PORTAL>).",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz_sa",
                            description = "Community ID (Gemeindekennzahl, see <http://www.statistik.at/web_de/klassifikationen/regionale_gliederungen/gemeinden/index.html>)",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cat_technology",
                            description = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_version",
                            description = "Software version number of the client.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "model",
                            description = "Name of the device used.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_name",
                            description = "Display name of the mobile network.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_type",
                            description = "Type of the network, e.g. MOBILE, LAN, WLAN.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "platform",
                            description = "Platform on which the test has been conducted",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "signal_strength",
                            description = "Signal strength (RSSI) in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lte_rsrp",
                            description = "LTE signal strength in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_uuid",
                            description = "Open-UUID: Identifies the client that conducted the test. The a new Open-UUID is assigned to the client on a regular basis.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_test_uuid",
                            description = "The UUID of the test.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_uuid",
                            description = "The private UUID of a client",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loop_uuid",
                            description = "The loop UUID of a single loop test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "test_uuid",
                            description = "The private UUID of a test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "long",
                            description = "Longitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lat",
                            description = "Latitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radius",
                            description = "Radius in meters defining based on lat/long parameters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "mobile_provider_name",
                            description = "mobile operator name",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "provider_name",
                            description = "Name of the internet service provider.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_mcc_mnc",
                            description = "Network identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_country",
                            description = "Home country of the SIM card in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_country",
                            description = "Country of the network in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_geoip",
                            description = "Country according client IP address.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_location",
                            description = "Country of geo-location.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "user_server_selection",
                            description = "Legacy",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loc_accuracy",
                            description = "Estimation of accuracy of client location in meters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "link_name",
                            description = "Austrian road/raiway line identifier, e.g. 'A2'",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "public_ip_as_name",
                            description = "Name of the AS of the clients public IP.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "time",
                            description = "UTC date and time when test was started.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radio_band",
                            description = "Radio band used when conducting the test.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_area_code",
                            description = "Number describing the coarse location of a cell. E.g. the Tracking Area Code (TAC) in case of 4G " +
                                    "or the Location Area Code (LAC) in case of 2G or 3G",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_location_id",
                            description = "Number identifying the location of a cell. E.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "additional_info",
                            description = "additional properties to return",
                            example = "download_classification",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "format",
                            description = "Desired output format, either 'csv' or 'json', default: json",
                            example = "json",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_by",
                            description = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                            example = "download_kbit",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_order",
                            description = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.",
                            schema = @Schema(type = "string"),
                            example = "asc",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "max_results",
                            description = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.",
                            schema = @Schema(implementation = Integer.class),
                            example = "10",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cursor",
                            description = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sender",
                            description = "Sender ID",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "timestamp",
                            description = "Alias '_'. Will be ignored and can be used to prevent caching of the response.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "asn",
                            description = "Provider asn",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "land_cover",
                            description = "Land cover number",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "implausible",
                            description = "Implausible",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "pinned",
                            description = "Pinned",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY)
            })
    @GetMapping(value = URIConstants.OPEN_TEST_CHOICES)
    public ChoicesResponse getChoices(@Parameter(hidden = true) @RequestParam MultiValueMap<String, String> parameters) {
        return openTestService.getChoices(parameters);
    }

    @Operation(summary = "Open tests statistics",
            description = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.",
            parameters = {
                    @Parameter(name = "download_kbit",
                            description = "Download speed in kilobit per second",
                            example = ">6903",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "upload_kbit",
                            description = "Upload speed in kilobit per second.",
                            schema = @Schema(type = "string"),
                            example = "<4670",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "ping_ms",
                            description = "Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions " +
                                    "(before June 3rd 2015) this was the minimum ping measured on the client side.",
                            schema = @Schema(type = "string"),
                            example = "<16",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz",
                            description = "Community ID (Gemeindekennzahl, see <http://www.bev.gv.at/portal/page?_pageid=713,2601287&_dad=portal&_schema=PORTAL>).",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz_sa",
                            description = "Community ID (Gemeindekennzahl, see <http://www.statistik.at/web_de/klassifikationen/regionale_gliederungen/gemeinden/index.html>)",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cat_technology",
                            description = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_version",
                            description = "Software version number of the client.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "model",
                            description = "Name of the device used.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_name",
                            description = "Display name of the mobile network.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_type",
                            description = "Type of the network, e.g. MOBILE, LAN, WLAN.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "platform",
                            description = "Platform on which the test has been conducted",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "signal_strength",
                            description = "Signal strength (RSSI) in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lte_rsrp",
                            description = "LTE signal strength in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_uuid",
                            description = "Open-UUID: Identifies the client that conducted the test. The a new Open-UUID is assigned to the client on a regular basis.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_test_uuid",
                            description = "The UUID of the test.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_uuid",
                            description = "The private UUID of a client",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loop_uuid",
                            description = "The loop UUID of a single loop test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "test_uuid",
                            description = "The private UUID of a test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "long",
                            description = "Longitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lat",
                            description = "Latitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radius",
                            description = "Radius in meters defining based on lat/long parameters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "mobile_provider_name",
                            description = "mobile operator name",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "provider_name",
                            description = "Name of the internet service provider.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_mcc_mnc",
                            description = "Network identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_country",
                            description = "Home country of the SIM card in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_country",
                            description = "Country of the network in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_geoip",
                            description = "Country according client IP address.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_location",
                            description = "Country of geo-location.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "user_server_selection",
                            description = "Legacy",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loc_accuracy",
                            description = "Estimation of accuracy of client location in meters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "link_name",
                            description = "Austrian road/raiway line identifier, e.g. 'A2'",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "public_ip_as_name",
                            description = "Name of the AS of the clients public IP.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "time",
                            description = "UTC date and time when test was started.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radio_band",
                            description = "Radio band used when conducting the test.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_area_code",
                            description = "Number describing the coarse location of a cell. E.g. the Tracking Area Code (TAC) in case of 4G " +
                                    "or the Location Area Code (LAC) in case of 2G or 3G",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_location_id",
                            description = "Number identifying the location of a cell. E.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "additional_info",
                            description = "additional properties to return",
                            example = "download_classification",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "format",
                            description = "Desired output format, either 'csv' or 'json', default: json",
                            example = "json",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_by",
                            description = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                            example = "download_kbit",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_order",
                            description = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.",
                            schema = @Schema(type = "string"),
                            example = "asc",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "max_results",
                            description = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.",
                            schema = @Schema(implementation = Integer.class),
                            example = "10",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cursor",
                            description = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sender",
                            description = "Sender ID",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "timestamp",
                            description = "Alias '_'. Will be ignored and can be used to prevent caching of the response.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "asn",
                            description = "Provider asn",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "land_cover",
                            description = "Land cover number",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "implausible",
                            description = "Implausible",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "pinned",
                            description = "Pinned",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY)
            })
    @GetMapping(value = URIConstants.OPEN_TEST_STATISTICS)
    public Map<String, Long> getStatistics(@Parameter(hidden = true) @RequestParam MultiValueMap<String, String> parameters) {
        return openTestService.getStatistics(parameters);
    }

    @Operation(summary = "Open tests intraday",
            description = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.",
            parameters = {
                    @Parameter(name = "download_kbit",
                            description = "Download speed in kilobit per second",
                            example = ">6903",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "upload_kbit",
                            description = "Upload speed in kilobit per second.",
                            schema = @Schema(type = "string"),
                            example = "<4670",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "ping_ms",
                            description = "Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions " +
                                    "(before June 3rd 2015) this was the minimum ping measured on the client side.",
                            schema = @Schema(type = "string"),
                            example = "<16",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz",
                            description = "Community ID (Gemeindekennzahl, see <http://www.bev.gv.at/portal/page?_pageid=713,2601287&_dad=portal&_schema=PORTAL>).",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz_sa",
                            description = "Community ID (Gemeindekennzahl, see <http://www.statistik.at/web_de/klassifikationen/regionale_gliederungen/gemeinden/index.html>)",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cat_technology",
                            description = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_version",
                            description = "Software version number of the client.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "model",
                            description = "Name of the device used.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_name",
                            description = "Display name of the mobile network.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_type",
                            description = "Type of the network, e.g. MOBILE, LAN, WLAN.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "platform",
                            description = "Platform on which the test has been conducted",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "signal_strength",
                            description = "Signal strength (RSSI) in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lte_rsrp",
                            description = "LTE signal strength in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_uuid",
                            description = "Open-UUID: Identifies the client that conducted the test. The a new Open-UUID is assigned to the client on a regular basis.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_test_uuid",
                            description = "The UUID of the test.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_uuid",
                            description = "The private UUID of a client",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loop_uuid",
                            description = "The loop UUID of a single loop test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "test_uuid",
                            description = "The private UUID of a test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "long",
                            description = "Longitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lat",
                            description = "Latitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radius",
                            description = "Radius in meters defining based on lat/long parameters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "mobile_provider_name",
                            description = "mobile operator name",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "provider_name",
                            description = "Name of the internet service provider.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_mcc_mnc",
                            description = "Network identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_country",
                            description = "Home country of the SIM card in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_country",
                            description = "Country of the network in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_geoip",
                            description = "Country according client IP address.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_location",
                            description = "Country of geo-location.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "user_server_selection",
                            description = "Legacy",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loc_accuracy",
                            description = "Estimation of accuracy of client location in meters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "link_name",
                            description = "Austrian road/raiway line identifier, e.g. 'A2'",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "public_ip_as_name",
                            description = "Name of the AS of the clients public IP.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "time",
                            description = "UTC date and time when test was started.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radio_band",
                            description = "Radio band used when conducting the test.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_area_code",
                            description = "Number describing the coarse location of a cell. E.g. the Tracking Area Code (TAC) in case of 4G " +
                                    "or the Location Area Code (LAC) in case of 2G or 3G",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_location_id",
                            description = "Number identifying the location of a cell. E.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "additional_info",
                            description = "additional properties to return",
                            example = "download_classification",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "format",
                            description = "Desired output format, either 'csv' or 'json', default: json",
                            example = "json",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_by",
                            description = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                            example = "download_kbit",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_order",
                            description = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.",
                            schema = @Schema(type = "string"),
                            example = "asc",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "max_results",
                            description = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.",
                            schema = @Schema(implementation = Integer.class),
                            example = "10",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cursor",
                            description = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sender",
                            description = "Sender ID",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "timestamp",
                            description = "Alias '_'. Will be ignored and can be used to prevent caching of the response.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "asn",
                            description = "Provider asn",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "land_cover",
                            description = "Land cover number",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "implausible",
                            description = "Implausible",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "pinned",
                            description = "Pinned",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY)
            })
    @GetMapping(value = URIConstants.OPEN_TEST_INTRADAY)
    public List<HourlyStatisticResponse> getIntraday(@Parameter(hidden = true) @RequestParam MultiValueMap<String, String> parameters) {
        return openTestService.getIntraday(parameters);
    }

    @Operation(summary = "Open tests histogram",
            description = "Date fields have to be submitted as a number, representing the number of milliseconds that have elapsed since midnight, January 1st, 1970 or " +
                    "in the format “yyyy-MM-dd HH:mm:ss”. The time is given in UTC.\n\n" +
                    "Decimal point (Full Stop “.”) is always used to separate the integer part from the fractional part of a number written in decimal form. " +
                    "This is independent from the local or regional settings.\n\n" +
                    "Numeric fields also allow using the comparators ‘>’ and ‘<’ (meaning ‘=>’ and ‘=<’ respectively). Dates have always to be queried as ranges " +
                    "by using these comparators.\n\n" +
                    "String fields allow using the wildcard ‘*’ for matching any literals and ‘?’ for matching one arbitrary literal.\n\n" +
                    "It is possible, to begin each filter argument with an exclamation mark (!) to negate the filter. E.g. network_type=!LAN will yield all " +
                    "tests where the network type was not LAN.\n\n" +
                    "The criteria denoted with [] can be used more than once in a query. Data has to match all criteria. If an array for one criterion is given, " +
                    "the data has to match each entry.\n\n" +
                    "Generally a query on a parameter value ‘null’ is not possible, except for the parameter loc_accuracy, where the value -1 means ‘null’. " +
                    "Non-‘null’ values are queried with any single or multiple values.",
            parameters = {
                    @Parameter(name = "download_kbit",
                            description = "Download speed in kilobit per second",
                            example = ">6903",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "upload_kbit",
                            description = "Upload speed in kilobit per second.",
                            schema = @Schema(type = "string"),
                            example = "<4670",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "ping_ms",
                            description = "Median ping (round-trip time) in milliseconds, measured on the server side. In previous versions " +
                                    "(before June 3rd 2015) this was the minimum ping measured on the client side.",
                            schema = @Schema(type = "string"),
                            example = "<16",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz",
                            description = "Community ID (Gemeindekennzahl, see <http://www.bev.gv.at/portal/page?_pageid=713,2601287&_dad=portal&_schema=PORTAL>).",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "gkz_sa",
                            description = "Community ID (Gemeindekennzahl, see <http://www.statistik.at/web_de/klassifikationen/regionale_gliederungen/gemeinden/index.html>)",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cat_technology",
                            description = "Technology category of the network, e.g. “3G”, “4G”, “WLAN”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_version",
                            description = "Software version number of the client.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "model",
                            description = "Name of the device used.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_name",
                            description = "Display name of the mobile network.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_type",
                            description = "Type of the network, e.g. MOBILE, LAN, WLAN.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "platform",
                            description = "Platform on which the test has been conducted",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "signal_strength",
                            description = "Signal strength (RSSI) in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lte_rsrp",
                            description = "LTE signal strength in dBm.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_uuid",
                            description = "Open-UUID: Identifies the client that conducted the test. The a new Open-UUID is assigned to the client on a regular basis.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "open_test_uuid",
                            description = "The UUID of the test.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "client_uuid",
                            description = "The private UUID of a client",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loop_uuid",
                            description = "The loop UUID of a single loop test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "test_uuid",
                            description = "The private UUID of a test",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "long",
                            description = "Longitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "lat",
                            description = "Latitude of the client position.",
                            schema = @Schema(implementation = Double.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radius",
                            description = "Radius in meters defining based on lat/long parameters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "mobile_provider_name",
                            description = "mobile operator name",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "provider_name",
                            description = "Name of the internet service provider.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_mcc_mnc",
                            description = "Network identification of the SIM provider. The digits of MCC and MNC have the same meaning as described in “network_mcc_mnc”.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sim_country",
                            description = "Home country of the SIM card in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "network_country",
                            description = "Country of the network in ISO 3166.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_geoip",
                            description = "Country according client IP address.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "country_location",
                            description = "Country of geo-location.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "user_server_selection",
                            description = "Legacy",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "loc_accuracy",
                            description = "Estimation of accuracy of client location in meters",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "link_name",
                            description = "Austrian road/raiway line identifier, e.g. 'A2'",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "public_ip_as_name",
                            description = "Name of the AS of the clients public IP.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "time",
                            description = "UTC date and time when test was started.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "radio_band",
                            description = "Radio band used when conducting the test.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_area_code",
                            description = "Number describing the coarse location of a cell. E.g. the Tracking Area Code (TAC) in case of 4G " +
                                    "or the Location Area Code (LAC) in case of 2G or 3G",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cell_location_id",
                            description = "Number identifying the location of a cell. E.g. the 28-bit Cell Identity (CI) in case of 4G, " +
                                    "the 28-bit UMTS Cell Identity (CID) in case of UMTS or the 16-bit GSM Cell Identity (CID) in case of GSM.",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "additional_info",
                            description = "additional properties to return",
                            example = "download_classification",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "format",
                            description = "Desired output format, either 'csv' or 'json', default: json",
                            example = "json",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_by",
                            description = "The field for which the data are sorted. Valid fields are: “download_kbit\", \"upload_kbit\", \"time\", \"signal_strength\", \"lte_rsrp\" and \"ping_ms\"",
                            example = "download_kbit",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sort_order",
                            description = "The sort_by-Parameter specifies the field, the sort_order-Parameter specifies the direction ('asc' or 'desc').\n " +
                                    "Per Default, the results are sorted by the time of the test in descending order (i.e. sort_by=time&sort_order=desc).\n " +
                                    "If the sort parameters are specified, the value of the cursor is a multiple of the parameter max_results, otherwise it is an arbitrary number.",
                            schema = @Schema(type = "string"),
                            example = "asc",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "max_results",
                            description = "This is the page size, i.e. maximum number of result items that are returned per page.\n " +
                                    "The default value is 100 items per page. The page size limit is 10000 items, i.e. not more than 10000 results can be displayed in a page.",
                            schema = @Schema(implementation = Integer.class),
                            example = "10",
                            in = ParameterIn.QUERY),
                    @Parameter(name = "cursor",
                            description = "used for pagination if the query returns more than the number of items according to parameter max_results. " +
                                    "The value to be used for the display of the next page is given by the previous response in returned parameter next_cursor.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "sender",
                            description = "Sender ID",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "timestamp",
                            description = "Alias '_'. Will be ignored and can be used to prevent caching of the response.",
                            schema = @Schema(type = "string"),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "asn",
                            description = "Provider asn",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "land_cover",
                            description = "Land cover number",
                            schema = @Schema(implementation = Long.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "implausible",
                            description = "Implausible",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY),
                    @Parameter(name = "pinned",
                            description = "Pinned",
                            schema = @Schema(implementation = Boolean.class),
                            in = ParameterIn.QUERY)
            })
    @GetMapping(value = URIConstants.OPEN_TEST_HISTOGRAM)
    public HistogramResponse getHistogram(@Parameter(hidden = true) @RequestParam MultiValueMap<String, String> parameters) {
        return openTestService.getHistogram(parameters);
    }
}
